/*
 * Copyright (c) 2015 Manuel de la Pe√±a <mandel@themacaque.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#pragma once

#include <com/chancho/system/database.h>
#include <com/chancho/transaction.h>
#include <com/chancho/recurrent_transaction.h>

namespace com {

namespace chancho {

namespace book {

class Transactions {

 public:
    Transactions() = delete;

    Transactions(system::DatabasePtr db);

    virtual ~Transactions() = default;

    /*!
        \fn virtual void store(TransactionPtr tran);

        Stores or updates the given \a tran in the database.

        \note When a transaction is newly added to the database a new unique identifier is provided for the account.
    */
    virtual void store(TransactionPtr tran);

    /*!
        \fn virtual void store(TransactionPtr tran);

        Stores or updates the given \a trans in the database.

        \note When a transaction is newly added to the database a new unique identifier is provided for the account.
    */
    virtual void store(QList<TransactionPtr> trans);

    /*!
        \fn virtual void store(RecurrentTransactionPtr tran, bool updatePast=false);

        Stores or updates the given recurrent \a tran in the database. Is trus is passed as the second argument all
        previosly generated transactions will be updated.

        \note When a transaction is newly added to the database a new unique identifier is provided for the account.
    */
    virtual void store(RecurrentTransactionPtr tran, bool updatePast=false);

    /*!
        \fn virtual void store(TransactionPtr tran);

        Stores or updates the given recurrent \a trans in the database.

        \note When a transaction is newly added to the database a new unique identifier is provided for the account.
    */
    virtual void store(QList<RecurrentTransactionPtr> trans);

    /*!
        \fn virtual void remove(TransactionPtr tran);

        Removes the given \a tran from the database.
    */
    virtual void remove(TransactionPtr tran);

    /*!
        \fn virtual void remove(RecurrentTransactionPtr tran);

        Removes the given \a tran from the database. If true is passed as the second argument all generated
        transactions will be removed.
    */
    virtual void remove(RecurrentTransactionPtr tran, bool removeGenerated=false);

    /*!
        \fn virtual QList<TransactionPtr> transactions(RecurrentTransactionPtr recurrent);

        Returns all transactions that have been generated by the given recurrent transaction.
    */
    virtual QList<TransactionPtr> transactions(RecurrentTransactionPtr recurrent,
                                               boost::optional<int> limit = boost::optional<int>(),
                                               boost::optional<int> offset = boost::optional<int>());

    /*!
        \fn virtual int numberOfTransactions();

        Returns the number of all transactions that have been stored in the database.
    */
    virtual int numberOfTransactions();

    /*!
        \fn virtual int numberOfTransactions(int month, int year);

        Returns the number of transactions that have been stored in an specific month.
    */
    virtual int numberOfTransactions(int month, int year);

    /*!
        \fn virtual int numberOfTransactions(int day, int month, int year);

        Returns the number of transactions that have been stored in an specific day.
    */
    virtual int numberOfTransactions(int day, int month, int year);

    /*!
        \fn virtual int numberOfTransactions(RecurrentTransactionPtr recurrent);

        Returns the number of transactions that have been generated by the given recurrent transactions.
    */
    virtual int numberOfTransactions(RecurrentTransactionPtr recurrent);

    QList<TransactionPtr> transactions(int year, int month, boost::optional<int> day=boost::optional<int>(),
                                       boost::optional<int> limit=boost::optional<int>(),
                                       boost::optional<int> offset=boost::optional<int>());

    /*!
        \fn virtual QList<TransactionPtr> transactions(CategoryPtr cat, int month, int year);

        Returns all the transactions that have be registered with the given category in a specific month.
    */
    virtual QList<TransactionPtr> transactions(CategoryPtr cat, boost::optional<int> month=boost::optional<int>(),
                                               boost::optional<int> year=boost::optional<int>());

    /*!
        \fn virtual QList<TransactionPtr> transactions(AccountPtr acc);

        Returns all the transactions that have be registered to the given account.
    */
    virtual QList<TransactionPtr> transactions(AccountPtr acc);

    /*!
        \fn virtual QList<int> monthsWithTransactions(int year, int limit, int offset);

        Returns all the months in a year that have registered transactions limited to the given amount and with the
        given offset from the top result.
    */
    virtual QList<int> monthsWithTransactions(int year, boost::optional<int> limit=boost::optional<int>(),
                                              boost::optional<int> offset=boost::optional<int>());

    /*!
        \fn virtual int numberOfMonthsWithTransactions(int year);

        Returns the number of months that have transactions in the database for the given year.
    */
    virtual int numberOfMonthsWithTransactions(int year);

    /*!
        \fn virtual QList<int> daysWithTransactions(int month, int year, int limit, int offset);

        Returns all the days in a month that have registered transactions limited to the given amount and with the
        given offset from the top result.
    */
    virtual QList<int> daysWithTransactions(int month, int year, boost::optional<int> limit=boost::optional<int>(),
                                            boost::optional<int> offset=boost::optional<int>());

    /*!
        \fn virtual int numberOfDaysWithTransactions(int month, int year);

        Returns the number of days in a month that have registered transactions.
    */
    virtual int numberOfDaysWithTransactions(int month, int year);

    /*!
        \fn virtual QList<RecurrentTransactionPtr> recurrent_transactions(
        boost::optional<int> limit = boost::optional<int>(), boost::optional<int> offset = boost::optional<int>());

        Returns a list with all the recurrent transactions that have been created in the system.
     */
    virtual QList<RecurrentTransactionPtr> recurrentTransactions(boost::optional<int> limit = boost::optional<int>(),
                                                                 boost::optional<int> offset = boost::optional<int>());

    /*!
        \fn virtual QList<RecurrentTransactionPtr> recurrentTransactions(CategoryPtr cat,
                                                                 boost::optional<int> limit = boost::optional<int>(),
                                                                 boost::optional<int> offset = boost::optional<int>());

        Returns a list with all the recurrent transactions that have the given category.
     */
    virtual QList<RecurrentTransactionPtr> recurrentTransactions(CategoryPtr cat,
                                                                 boost::optional<int> limit = boost::optional<int>(),
                                                                 boost::optional<int> offset = boost::optional<int>());

    /*!
        \fn virtual int numberOfRecurrentTransactions()

        Returns the number of recurrent transactions in the system.
    */
    virtual int numberOfRecurrentTransactions();

    /*!
        \fn virtual int numberOfRecurrentTransactions(CategoryPtr cat);

        Returns the number of recurrent transactions in the system with the given category.
    */
    virtual int numberOfRecurrentTransactions(CategoryPtr cat);

    /*!
        \fn void generateRecurrentTransactions();

        Generates the recurrent transactions that have not been added since the last time the
        application was used.
     */
    virtual void generateRecurrentTransactions();

    /*!
        \fn virtual bool isError();

        Returns if there was an error in the execution of a method.
    */
    virtual bool isError();

    /*!
        \fn virtual QString lastError();

        Returns the last error.
    */
    virtual QString lastError();

 private:
    QList<TransactionPtr> parseTransactions(std::shared_ptr<system::Query> query);
    QList<RecurrentTransactionPtr> parseRecurrentTransactions(std::shared_ptr<system::Query> query);
    bool storeSingleTransactions(TransactionPtr tran);
    bool storeSingleRecurrentTransactions(RecurrentTransactionPtr recurrent);
    void storeRecurrentNoUpdates(RecurrentTransactionPtr tran);
    void storeRecurrentWithUpdate(RecurrentTransactionPtr recurrent);
    bool storeSingleAttachment(const TransactionPtr& tran, const AttachmentPtr& attachment);
    void storeGeneratedTransactions(QMap<RecurrentTransactionPtr, QList<TransactionPtr>> trans);

 protected:
    system::DatabasePtr _db;
    QString _lastError = QString::null;
};

}
}
}
